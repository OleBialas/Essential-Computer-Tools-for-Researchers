---
title: "Working with Remote Repositories using GitHub"
format: md
filters:
  - assign
number-sections: true
number-depth: 2
---

In this unit, we will learn how to connect a local Git repository to GitHub, clone an existing repository to work locally, and fork repositories to contribute to open-source projects or collaborate with others. GitHub provides a platform for storing repositories online, enabling version control, collaboration, and backup of your work. This unit covers essential commands for working with remote repositories.  


### Creating a GitHub Account

1. Go to [GitHub Sign Up](https://github.com/signup).  
2. Fill in the required details.  
3. Verify your email and complete the account setup.  

## Pushing a Local Repository to GitHub

Once you have a local repository, you can push it to GitHub to store it online and collaborate with others. This section covers adding a remote repository, pushing changes, and setting an upstream branch for future updates.  

| Command | Description | VS Code GUI |
|---|---|---|
| `git remote add origin <URL>` | Link the local repository to a remote GitHub repository | Click **Source Control (Ctrl + Shift + G)** → Click **Publish Repository** |
| `git push -u origin main` | Push local commits to the remote repository and set upstream | Click **Source Control** → Click **...** → Click **Push** |

---

:::{#exr-}
Open a local git repository (you can use the one from the previous notebook) in a new VSCode window.
:::

:::{#exr-}
Go to your GitHub page and xreate a new **public** repository on GitHub. IMPORTANT: initialize it **without** a REAME file - it should be **completely empty**. After you create the repository, copy the URL.
:::

:::{#exr-}
In your local repository, add the remote URL using `git remote add origin <repo-url>`
:::

:::{#exr-}
Push the local repository to GitHub using `git push -u origin main`.  
:::

:::{#exr-}
Go to GitHub to verify that your repository now contains the pushed content.
:::

:::{#exr-}
Add a new text file with some content and commit the changes in local repository.  
:::

:::{#exr-}
Push the new commit to GitHub using `git push -u origin main`.  
:::

:::{#exr-}
Check GitHub to verify that your repository now contains the new file.
:::

:::{#exr-}
Add new lines to the text file and commit the changes in local repository.
:::

:::{#exr-}
Push the new commit to GitHub
:::

:::{#exr-}
Check GitHub to confirm that the changes are reflected in the file. 
:::

## Cloning a GitHub Repository to a Local Machine  

If a repository already exists on GitHub, you can clone it to your local machine to work on it. This section covers cloning repositories and pulling the latest changes from GitHub.  

| Command | Description | VS Code GUI |
|---|---|---|
| `git clone <repo-url>` | Clone a GitHub repository to a local machine  | Click **Source Control (Ctrl + Shift + G)** → Click **Clone Repository** |
| `git pull origin main` | Pull the latest changes from GitHub | Click **Source Control** → Click **...** → Click **Pull** |

---

:::{#exr-}
Open a folder that is **not a Git repository** in a new VSCode window.
:::

:::{#exr-}
opy the URL of the repository containing the materials for this workshop: https://github.com/ibehave-ibots/iBOTS-Essential-Computer-Tools-for-Researchers-Workshop
:::

:::{#exr-}
In the VS Code terminal, run `git clone <repo-url>` or use VS Code GUI to clone the repository. 
:::

:::{#exr-}
Open the cloned folder in VS Code and check that all the files are present on your local machine.
:::

:::{#exr-}
Create a new public repository on GitHub, **this time initializing it with a README** and copy the URL. 
:::

:::{#exr-}
In the terminal, run `git clone <repo-url>` or use VS Code GUI to clone the repository. 
:::

:::{#exr-}
Open the cloned folder in VS Code and check that the README file exists.  
:::

:::{#exr-}
Make a change directly on GitHub (edit the README file and commit).  
:::

:::{#exr-}
In the terminal, run `git pull origin main` or use VS Code GUI.  
:::

:::{#exr-}
Verify that the changes are now in your local copy.  
:::

:::{#exr-}
Bonus: In a new VSCode window, clone a public repository from another member of your group. Then, let them make a change to their repository and pull the change to your local clone
:::

## Forking a Repository on GitHub  

Forking allows you to create a personal copy of someone else's repository. This is useful for contributing to open-source projects or working on repositories you don’t have direct write access to. This section covers forking a repository, cloning the fork, and keeping it updated with the original repository.  

| Command | Description | VS Code GUI |
|---|---|---|
| **(GitHub UI)** | Fork a repository on GitHub | Click **Fork** on the GitHub repository page |
| `git clone <your-fork-url>` | Clone your forked repository locally | Click **Source Control (Ctrl + Shift + G)** → Click **Clone Repository** |
| `git remote add upstream <original-repo-url>` | Link the original repository as an upstream remote | NA |
| `git push origin main` | Push the merged changes to your forked repository on GitHub | Click **Source Control** → Click **...** → Click **Push** |

---

:::{#exr-}
Go to GitHub and fork the repository containing the materials for this workshop: https://github.com/ibehave-ibots/iBOTS-Essential-Computer-Tools-for-Researchers-Workshop and copy the URL of your fork.
:::

:::{#exr-}
In a new VSCode window, clone your forked repository using `git clone <your-fork-url>`.  
:::

:::{#exr-}
Make a change to the README (or any other file) and commit them.  
:::

:::{#exr-}
Push the changes to your forked repository using `git push origin main` and verify that your repository contains the changes
:::

## Collaborating on GitHub

:::{#exr-}
Create a new **public GitHub repository** with a README file containing your name.  
:::

:::{#exr-}
Fork the repository frm **another** member of your group.
:::

:::{#exr-}
Clone the forked repository locally using `git clone <fork-url>`.  
:::

:::{#exr-}
Add a new file (e.g., `hello_your_name.txt`) and commit the changes.  
:::

:::{#exr-}
Push the changes to the forked repository.  
:::

:::{#exr-}
Creates a **Pull Request (PR)** to the original repository from your fork.  
:::

:::{#exr-}
If you received a PR, review it and merge it into your repository
:::