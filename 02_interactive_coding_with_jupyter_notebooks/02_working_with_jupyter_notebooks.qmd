---
title: "Interactive Coding with Jupyter Notebooks"
format: md
filters:
  - assign
number-sections: true
number-depth: 2
---

When we do data analysis for research, we often want to explore our data interactively and document this process to retrace it later. Jupyter notebooks are a great tool for this because they provide an interactive environment for writing text and running code. Thus, we can have our code, text that explains the code as well as the output produced by that code, like figures, all in the same document!  In this notebook, we are going to explore the basics of working with Jupyter notebooks in VSCode.

## Using Jupyter Notebooks

Jupyter notebooks support many different programming languages like Python, R and Julia. The notebooks themselves are just text documents with a specialized formating. If we want to run code in a notebook, we must provide a **kernel** which is the computational engine for executing the code. In our case, the kernel is the conda environment we created for the respective project. We also need a specific package called `ipykernel` which acts as a bridge that communicates between kernel and the notebook interface. Once the notebook is connected to the kernel, we can start running code in it!

---

:::{#exr-}
Create a new environment with `conda create -n test_jupyter`, then activate that environment and use `conda install python=3.13 ipykernel` to install Python and the IPython kernel.
:::

:::{.sol}
```bash
conda create -n test_jupyter
conda activate test_jupyter
conda install python=3.13 ipykernel
```
:::

:::{#exr-}
Split your VSCode editor by presing `Ctrl+/` or by clicking on the button labeled "Split Editor Right" in the top right corner. Then, use the file explorer on the left to open `wellcome_jupyter.ipynb` in the new split.
:::

:::{#exr-}
Click on the "Select Kernel" button and click "Select Another Kernel" then choose "Select Another Kernel" > "Python Environments" and select the newly created `test_jupyter` environment. Observe how the text in the code cells is now being highlighted!

**Note for Windows users**: if `test_jupyter` does not show up on the list, it means that VSCode can't find conda. To fix this, close VSCode, open the program "Miniforge Prompt" and launch VSCode from there by simply typing `code` and hitting enter. Then, try again.
:::

:::{#exr-}
Execute both code cells in the notebook and observe the output.
:::

:::{#exr-}
Run the entire notebook by clicking "Run All"
:::

## Creating your First Notebook

Now that we know how to use a notebook, it is time to create our own!

---

:::{#exr-}
Click on the "New File" button that appears at the top when you hover over the VSCode file explorer and create a file called `my_first_notebook.ipynb` (the ".ipynb" file extension is essential because it tells VSCode that this file is a jupyter notebook). Then, open the file and select the `test_jupyter` kernel.
:::

:::{#exr-}
Create a new code cell in your notebook by clicking on the "+ Code" button. In this cell, enter the following code:
```python
print("Hi Notebook!")
```
Then, run the Cell
:::

:::{#exr-}
Create another code cell and enter the following code:
```python
! conda env list
```
The exclamation point tells the notebook that the executed code contains a command for the terminal.
:::

:::{#exr-}
Save your notebook, either by hitting `Ctrl + S` or by clicking "File">"Save" in the top left corner of VSCode.
:::


## Managing the State of a Notebook

---

:::{#exr-}
Open the notebook `managing_state.ipynb`, select the `test_jupyter` environmentas your kernel and run all three cells in the notebook.
:::

:::{#exr-}
Now "Restart" the notebook and, after restarting execute only the second cell. What error message do you get?
:::

:::{#exr-}
Run the whole notebook by using the "Run All" function
:::

:::{#exr-}
Open the notebook `riddle.ipynb` and find out in which order the cells must be executed so that the code runs without error.
:::

## Writing Markdown

The text cells in a Jupyter notebook are formatted using markdown, a simple yet powerful markup language. It is the same language that is used in this document. Markdown has become the defacto standard in software because it is simple, compatible across plattforms and can easily be converted to other formats (e.g. HTML, PDF). In this section, we are going to explore the basics of formatting text with markdown.

| Code | Description |
| --- | --- |
| `# Title` | Format the text `Title` as a heading level 1 |
| `## Subtitle` | Format the text `Subtitle` as a heading level 2 |
| `- first item`<br> `- second item` | Create an unordered list |
| `1. first item <br> `2. second item` | Create an ordered list |
| `This is *italicised*.` | Italice the text betwee the asterisks |
| `This is **bold**` | Make the text between the double asterisks bold |
| `[Google](google.com)` | Link to a website |
| `![Figure 1](./figure1.png)` | Embedd an image |

---

:::{#exr-}
Create a new notebook called `intro_to_markdown.ipynb` and open it.
:::

:::{#exr-}
Add a Markdown cell with a title that reads "Intro to Markdown". Hit `Esc` to exit editing mode and see the rendered text.
:::

:::{#exr-}
Add a Markdown cell with a subtitle that reads "Markdown Lists"
:::

:::{#exr-}
Add a Markdown cell with an ordered list that lists the steps for running a notebook (open the notebook, select a kernel, click "Run All")
:::

:::{#exr-}
Add a Markdown cell with an unordered list that lists three things you learned today
:::

:::{#exr-}
Add a Markdown cell with a subtitle that reads "Markdown Text Highlighting"
:::

:::{#exr-}
Add a Markdown cell with the text "Italicized text is the cat's meow" where "cat's meow" is italicized.
:::

:::{#exr-}
Add a Markdown cell with the text "I just love bold text" where "bold text" is bold.
:::

:::{#exr-}
Add a Markdown cell with a subtitle that reads "Links and Images"
:::

:::{#exr-}
Add a Markdown cell with a link to the iBOTS website: `https://ibehave.nrw/ibots-platform/about-ibots/`
:::

:::{#exr-}
Add a Markdown cell with and embed the image stored in `./images/ibots.png`
:::