{"title":"Managing Environments with Conda","markdown":{"yaml":{"title":"Managing Environments with Conda","format":"md","filters":["assign"],"number-sections":true,"number-depth":2},"headingText":"Installing Visual Studio Code (VSCode)","containsRefs":false,"markdown":"\n\nIn this unit, we will learn how to use Conda to manage packages and environments. Conda allows us to create isolated environments to install packages and manage research projects. We'll start by installing our editor VSCode and Conda.\n\nSimply follow [this link](https://code.visualstudio.com/download) to download and install VSCode for your operating system\n\n### Installing Conda via Miniforge\n\nMiniforge provides a streamlined approach to Conda installation with a minimal environment and access to the conda-forge community repository, which is popular for its extensive collection of data science and scientific computing packages. Miniforge is available for all major operating systems, making it a flexible choice for cross-platform development.  **If you do not already have Conda installed** please follow the instructions below to install Miniforge. \n\n#### macOS & Linux\n\n1. Download the Miniforge installer for your platform from [Miniforge releases](https://github.com/conda-forge/miniforge/releases).\n2. Open a terminal and navigate to the download location.\n3. Run the installer:\n   ```bash\n   bash Miniforge3-Linux-x86_64.sh  # or the macOS equivalent\n   ```\n4. Follow the prompts to complete installation.\n\n#### Windows\n\n1. Download the Miniforge installer for Windows from [Miniforge releases](https://github.com/conda-forge/miniforge/releases).\n2. Open and proceed through the installer with the default settings.\n3. To verify your installation, open the program `Miniforge Prompt` and print the version of your Conda installation by typing:\n```bash\nconda --version\n```\n\n## Creating and Managing Environments\n\nOne of the key advantages of Conda is its ability to create isolated environments, which are essentially self-contained workspaces with their own packages and dependencies. This allows us to experiment, develop, and analyze data without worrying about conflicts between different package versions, which can often disrupt workflows. This is especially helpful for reproducible research: by keeping dependencies organized, we ensure that our projects are replicable across systems.\n\nThis section covers the basics of creating, inspecting, activating, and deactivating Conda environments.\n\n\n| Command                         | Description                                      |\n|---------------------------------|--------------------------------------------------|\n| `conda create -n env_name`      | Create a new environment named `env_name`        |\n| `conda create -p dir_name`      | Create a new environment in the specified directory `dir_name`        |\n| `conda env list`                | List all existing Conda environments             |\n| `conda activate env_name`       | Activate the environment `env_name`              |\n| `conda deactivate`              | Deactivate the current Conda environment         |\n| `conda info --envs`             | Show paths and basic info about all environments |\n\n---\n\n:::{#exr-}\nCreate a new empty Conda environment named `test_env`.\n:::\n\n:::{.sol}\n```bash\nconda create -n test_env\n```\n:::\n\n:::{#exr-}\nList all environments to verify that `test_env` was created.\n:::\n\n:::{.sol}\n```bash\nconda info --envs\n```\n:::\n\n:::{#exr-}\nActivate `test_env` and confirm activation.\n:::\n\n:::{.sol}\n```bash\nconda activate test_env\n```\n:::\n\n:::{#exr-}\nDeactivate the environment\n:::\n\n:::{.sol}\n```bash\nconda deactivate\n```\n:::\n\n\n## Managing Packages with Conda\n\nConda environments allow us to install libraries and dependencies specific to each project. This helps avoid the challenges of \"dependency hell\" where incompatible package versions interfere with each other. Conda also allows us to install non-Python packages, providing great flexibility and power, especially for complex data workflows involving multiple languages.\n\nPer default, Miniforge's distribution of conda will install packages from the `conda-forge` channel which contains a wealth of scientific packages for download - you can find the full list [here](https://conda-forge.org/packages/)\n\n\n| Command                                | Description                                      |\n|----------------------------------------|--------------------------------------------------|\n| `conda install package_name`           | Install `package_name` into the active environment |\n| `conda install package_name -y` | Install `package_name` and automatically answer \"yes\" when being asked for confirmation |\n| `conda install -c conda-forge package_name`           | Install `package_name` from the `conda-forge` channel into the active environment. |\n| `conda list`                           | List all installed packages in the active environment |\n| `conda remove package_name` | Remove `package_name` from the active environment |\n| `conda clean --all` | Remove orphaned packages to clean up the active environment |\n\n---\n\n:::{#exr-}\nCreate and activate new environment named `py_env`.\n:::\n\n:::{.sol}\n```bash\nconda create -n py_env\nconda activate py_env\n```\n:::\n\n:::{#exr-}\nInstall `python=3.9` in `py_env`.\n:::\n\n:::{.sol}\n```bash\nconda install python=3.9\n```\n:::\n\n:::{#exr-}\nList all installed packages and verify that you see Python with version 3.9.xx installed.\n:::\n\n:::{.sol}\n```bash\nconda list\n```\n:::\n\n:::{#exr-}\nAlternatively, type `python --version` to verify Python was installed. \n:::\n\n:::{.sol}\n```bash\npython --version\n```\n:::\n\n\n:::{#exr-}\nInstall the package `numpy` into `py_env` and use the `-y` flag to automaticallt confirm the installation. List all packages in `py_env` to confirm the installation\n:::\n\n\n:::{.sol}\n```bash\nconda install numpy -y\nconda list\n```\n:::\n\n:::{#exr-}\nNow use `conda remove` to uninstall `numpy` and `list` all packages to confirm numpy was removed.\n:::\n\n:::{.sol}\n```bash\nconda remove numpy\nconda list\n```\n:::\n\n\n:::{#exr-}\nEven though `conda remove`, removes a package (and it's oprhaned dependencies) from the environment, it won't remove them from your computer - use `conda clean --all` to clean up packages and files that are no longer needed.\n:::\n\n:::{.sol}\n```bash\nconda clean --all\n```\n:::\n\n:::{#exr-}\nDeactivate the environment `py_env`\n:::\n\n:::{.sol}\n```bash\nconda deactivate\n```\n:::\n\n:::{#exr-}\nCreate and activate a new environment called `r_env`. Then, install `r-base` and verify the installation.\n:::\n\n:::{.sol}\n```bash\nconda create -n r_env\nconda activate r_env\nconda install r-base\nconda list\n```\n:::\n\n\n## Installing Packages with Pip\n\nWhile conda provides its own package manager, the conda-forge repository may not contain the package we are looking for. In this case, we can use the package manager `pip` which allows us to install from the Python Package Index (PyPI). PyPI is the largest repository for Python packages and it is less curated than conda-forge, meaning that anyone can upload their software there. By installing `pip` in our conda environment, we can access packages in both repositories!\n\nPlease note that combining two package managers, `pip` and `conda` within the same environment can lead to conflicts if they manage dependencies differently. Thus, it is a good practice to stick mostly to `conda` and only use `pip` if needed.\n\n| Command                                | Description                                      |\n|----------------------------------------|--------------------------------------------------|\n| `conda search something` | Search the conda repositories for a package called `something`|\n| `pip install mypackage` | Install `mypackage` into the current environment |\n| `pip uninstall mypackage` | Uninstall `mypackage` from the current environment |\n\n---\n\n:::{#exr-}\nActivate the environment `py_env`\n:::\n\n:::{.sol}\n```bash\nconda activate py_env\n```\n:::\n\n:::{#exr-}\nSeach the conda repository for the `matplotlib` package, what does the printed message say?\n:::\n\n:::{.sol}\n```bash\nconda search matplotlib\n```\n:::\n\n\n:::{#exr-}\nUse `conda install` to install `matplotlib`.\n:::\n\n:::{.sol}\n```bash\nconda install matplotlib\n```\n:::\n\n:::{#exr-}\nNow, try to install matplotlib using `pip install`, what does the printed message say?\n:::\n\n:::{.sol}\n```bash\npip install matplotlib\n```\n:::\n\n:::{#exr-}\nNow, install the `slab` (soundlab) package. First, use `conda search` to see whether the package is available via conda and, if not, install it via `pip`.\n:::\n\n\n:::{.sol}\n```bash\nconda search slab\npip install slab\n```\n:::\n\n\n:::{#exr-}\nUninstall `slab` again.\n:::\n\n\n:::{.sol}\n```bash\npip uninstall slab\n```\n:::\n\n\n## Exporting and Importing Environments\n\nOften, we would like to reproduce an environment across multiple computers and potentially share it with our collaborators. With Conda, we can `export` an environment, which creates a file that lists all of the packages that are installed with their exact version. With this file, we can create an exact replication of the environment, even after we deleted it or moved to a different setup.\n\n| Command                                     | Description                                              |\n|---------------------------------------------|----------------------------------------------------------|\n| `conda env export > environment.yml`        | Save active environment configuration to `environment.yml` |\n| `conda remove -n env_name --all`     | Remove the environment `env_name` completely |\n| `conda env create -f environment.yml`       | Create a new environment from the file `environment.yml` |\n| `conda env list`   | List all conda environments |\n\n---\n\n:::{#exr-}\nActivate the `py_env` environment and export it to a file named `py_env.yml`.\n:::\n\n:::{.sol}\n```bash\nconda activate py_env\nconda env export > py_env.yml\n```\n:::\n\n:::{#exr-}\nOpen `py_env.yml` in VSCode by clicking it in the file browser on the left and quickly scan its contents.\n:::\n\n\n:::{#exr-}\nDeactivate and remove `py_env` using `conda remove -n py_env --all`. List all the environments to verify that it has been removed.\n:::\n\n:::{.sol}\n```bash\nconda deactivate\nconda remove -n py_env --all\nconda env list\n```\n:::\n\n:::{#exr-}\nRecreate `py_env` from the `py_env.yml` file.\n:::\n\n:::{.sol}\n```bash\nconda env create -f py_env.yml\n```\n:::\n\n:::{#exr-}\nVerify the recreation by activating `py_env` and listing the installed packages.\n:::\n\n:::{.sol}\n```bash\nconda activate py_env\nconda list\n```\n:::\n\n:::{#exr-}\nBonus: remove all the environments you don't want to keep after this session.\n:::\n","srcMarkdownNoYaml":"\n\nIn this unit, we will learn how to use Conda to manage packages and environments. Conda allows us to create isolated environments to install packages and manage research projects. We'll start by installing our editor VSCode and Conda.\n\n### Installing Visual Studio Code (VSCode)\nSimply follow [this link](https://code.visualstudio.com/download) to download and install VSCode for your operating system\n\n### Installing Conda via Miniforge\n\nMiniforge provides a streamlined approach to Conda installation with a minimal environment and access to the conda-forge community repository, which is popular for its extensive collection of data science and scientific computing packages. Miniforge is available for all major operating systems, making it a flexible choice for cross-platform development.  **If you do not already have Conda installed** please follow the instructions below to install Miniforge. \n\n#### macOS & Linux\n\n1. Download the Miniforge installer for your platform from [Miniforge releases](https://github.com/conda-forge/miniforge/releases).\n2. Open a terminal and navigate to the download location.\n3. Run the installer:\n   ```bash\n   bash Miniforge3-Linux-x86_64.sh  # or the macOS equivalent\n   ```\n4. Follow the prompts to complete installation.\n\n#### Windows\n\n1. Download the Miniforge installer for Windows from [Miniforge releases](https://github.com/conda-forge/miniforge/releases).\n2. Open and proceed through the installer with the default settings.\n3. To verify your installation, open the program `Miniforge Prompt` and print the version of your Conda installation by typing:\n```bash\nconda --version\n```\n\n## Creating and Managing Environments\n\nOne of the key advantages of Conda is its ability to create isolated environments, which are essentially self-contained workspaces with their own packages and dependencies. This allows us to experiment, develop, and analyze data without worrying about conflicts between different package versions, which can often disrupt workflows. This is especially helpful for reproducible research: by keeping dependencies organized, we ensure that our projects are replicable across systems.\n\nThis section covers the basics of creating, inspecting, activating, and deactivating Conda environments.\n\n\n| Command                         | Description                                      |\n|---------------------------------|--------------------------------------------------|\n| `conda create -n env_name`      | Create a new environment named `env_name`        |\n| `conda create -p dir_name`      | Create a new environment in the specified directory `dir_name`        |\n| `conda env list`                | List all existing Conda environments             |\n| `conda activate env_name`       | Activate the environment `env_name`              |\n| `conda deactivate`              | Deactivate the current Conda environment         |\n| `conda info --envs`             | Show paths and basic info about all environments |\n\n---\n\n:::{#exr-}\nCreate a new empty Conda environment named `test_env`.\n:::\n\n:::{.sol}\n```bash\nconda create -n test_env\n```\n:::\n\n:::{#exr-}\nList all environments to verify that `test_env` was created.\n:::\n\n:::{.sol}\n```bash\nconda info --envs\n```\n:::\n\n:::{#exr-}\nActivate `test_env` and confirm activation.\n:::\n\n:::{.sol}\n```bash\nconda activate test_env\n```\n:::\n\n:::{#exr-}\nDeactivate the environment\n:::\n\n:::{.sol}\n```bash\nconda deactivate\n```\n:::\n\n\n## Managing Packages with Conda\n\nConda environments allow us to install libraries and dependencies specific to each project. This helps avoid the challenges of \"dependency hell\" where incompatible package versions interfere with each other. Conda also allows us to install non-Python packages, providing great flexibility and power, especially for complex data workflows involving multiple languages.\n\nPer default, Miniforge's distribution of conda will install packages from the `conda-forge` channel which contains a wealth of scientific packages for download - you can find the full list [here](https://conda-forge.org/packages/)\n\n\n| Command                                | Description                                      |\n|----------------------------------------|--------------------------------------------------|\n| `conda install package_name`           | Install `package_name` into the active environment |\n| `conda install package_name -y` | Install `package_name` and automatically answer \"yes\" when being asked for confirmation |\n| `conda install -c conda-forge package_name`           | Install `package_name` from the `conda-forge` channel into the active environment. |\n| `conda list`                           | List all installed packages in the active environment |\n| `conda remove package_name` | Remove `package_name` from the active environment |\n| `conda clean --all` | Remove orphaned packages to clean up the active environment |\n\n---\n\n:::{#exr-}\nCreate and activate new environment named `py_env`.\n:::\n\n:::{.sol}\n```bash\nconda create -n py_env\nconda activate py_env\n```\n:::\n\n:::{#exr-}\nInstall `python=3.9` in `py_env`.\n:::\n\n:::{.sol}\n```bash\nconda install python=3.9\n```\n:::\n\n:::{#exr-}\nList all installed packages and verify that you see Python with version 3.9.xx installed.\n:::\n\n:::{.sol}\n```bash\nconda list\n```\n:::\n\n:::{#exr-}\nAlternatively, type `python --version` to verify Python was installed. \n:::\n\n:::{.sol}\n```bash\npython --version\n```\n:::\n\n\n:::{#exr-}\nInstall the package `numpy` into `py_env` and use the `-y` flag to automaticallt confirm the installation. List all packages in `py_env` to confirm the installation\n:::\n\n\n:::{.sol}\n```bash\nconda install numpy -y\nconda list\n```\n:::\n\n:::{#exr-}\nNow use `conda remove` to uninstall `numpy` and `list` all packages to confirm numpy was removed.\n:::\n\n:::{.sol}\n```bash\nconda remove numpy\nconda list\n```\n:::\n\n\n:::{#exr-}\nEven though `conda remove`, removes a package (and it's oprhaned dependencies) from the environment, it won't remove them from your computer - use `conda clean --all` to clean up packages and files that are no longer needed.\n:::\n\n:::{.sol}\n```bash\nconda clean --all\n```\n:::\n\n:::{#exr-}\nDeactivate the environment `py_env`\n:::\n\n:::{.sol}\n```bash\nconda deactivate\n```\n:::\n\n:::{#exr-}\nCreate and activate a new environment called `r_env`. Then, install `r-base` and verify the installation.\n:::\n\n:::{.sol}\n```bash\nconda create -n r_env\nconda activate r_env\nconda install r-base\nconda list\n```\n:::\n\n\n## Installing Packages with Pip\n\nWhile conda provides its own package manager, the conda-forge repository may not contain the package we are looking for. In this case, we can use the package manager `pip` which allows us to install from the Python Package Index (PyPI). PyPI is the largest repository for Python packages and it is less curated than conda-forge, meaning that anyone can upload their software there. By installing `pip` in our conda environment, we can access packages in both repositories!\n\nPlease note that combining two package managers, `pip` and `conda` within the same environment can lead to conflicts if they manage dependencies differently. Thus, it is a good practice to stick mostly to `conda` and only use `pip` if needed.\n\n| Command                                | Description                                      |\n|----------------------------------------|--------------------------------------------------|\n| `conda search something` | Search the conda repositories for a package called `something`|\n| `pip install mypackage` | Install `mypackage` into the current environment |\n| `pip uninstall mypackage` | Uninstall `mypackage` from the current environment |\n\n---\n\n:::{#exr-}\nActivate the environment `py_env`\n:::\n\n:::{.sol}\n```bash\nconda activate py_env\n```\n:::\n\n:::{#exr-}\nSeach the conda repository for the `matplotlib` package, what does the printed message say?\n:::\n\n:::{.sol}\n```bash\nconda search matplotlib\n```\n:::\n\n\n:::{#exr-}\nUse `conda install` to install `matplotlib`.\n:::\n\n:::{.sol}\n```bash\nconda install matplotlib\n```\n:::\n\n:::{#exr-}\nNow, try to install matplotlib using `pip install`, what does the printed message say?\n:::\n\n:::{.sol}\n```bash\npip install matplotlib\n```\n:::\n\n:::{#exr-}\nNow, install the `slab` (soundlab) package. First, use `conda search` to see whether the package is available via conda and, if not, install it via `pip`.\n:::\n\n\n:::{.sol}\n```bash\nconda search slab\npip install slab\n```\n:::\n\n\n:::{#exr-}\nUninstall `slab` again.\n:::\n\n\n:::{.sol}\n```bash\npip uninstall slab\n```\n:::\n\n\n## Exporting and Importing Environments\n\nOften, we would like to reproduce an environment across multiple computers and potentially share it with our collaborators. With Conda, we can `export` an environment, which creates a file that lists all of the packages that are installed with their exact version. With this file, we can create an exact replication of the environment, even after we deleted it or moved to a different setup.\n\n| Command                                     | Description                                              |\n|---------------------------------------------|----------------------------------------------------------|\n| `conda env export > environment.yml`        | Save active environment configuration to `environment.yml` |\n| `conda remove -n env_name --all`     | Remove the environment `env_name` completely |\n| `conda env create -f environment.yml`       | Create a new environment from the file `environment.yml` |\n| `conda env list`   | List all conda environments |\n\n---\n\n:::{#exr-}\nActivate the `py_env` environment and export it to a file named `py_env.yml`.\n:::\n\n:::{.sol}\n```bash\nconda activate py_env\nconda env export > py_env.yml\n```\n:::\n\n:::{#exr-}\nOpen `py_env.yml` in VSCode by clicking it in the file browser on the left and quickly scan its contents.\n:::\n\n\n:::{#exr-}\nDeactivate and remove `py_env` using `conda remove -n py_env --all`. List all the environments to verify that it has been removed.\n:::\n\n:::{.sol}\n```bash\nconda deactivate\nconda remove -n py_env --all\nconda env list\n```\n:::\n\n:::{#exr-}\nRecreate `py_env` from the `py_env.yml` file.\n:::\n\n:::{.sol}\n```bash\nconda env create -f py_env.yml\n```\n:::\n\n:::{#exr-}\nVerify the recreation by activating `py_env` and listing the installed packages.\n:::\n\n:::{.sol}\n```bash\nconda activate py_env\nconda list\n```\n:::\n\n:::{#exr-}\nBonus: remove all the environments you don't want to keep after this session.\n:::\n"},"formats":{"md":{"identifier":{"display-name":"CommonMark","target-format":"md","base-format":"commonmark"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":false,"output-ext":"md","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"default-image-extension":"png","to":"markdown_strict+raw_html+all_symbols_escapable+backtick_code_blocks+fenced_code_blocks+space_in_atx_header+intraword_underscores+lists_without_preceding_blankline+shortcut_reference_links","filters":["assign"],"number-sections":true,"output-file":"01_managing_environments_with_conda.md"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"title":"Managing Environments with Conda","number-depth":2}}},"projectFormats":[]}