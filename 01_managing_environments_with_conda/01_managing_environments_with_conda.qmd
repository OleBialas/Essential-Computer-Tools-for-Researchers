---
title: "Managing Environments with Conda"
format: html
filters:
    - assign
number-sections: true
number-depth: 2
---

In this unit, we will learn how to use Conda to manage packages and environments. Conda allows us to create isolated environments to install packages and manage research projects. We'll start by installing our editor VSCode and Conda.

### Installing Visual Studio Code (VSCode)
Simply follow [this link](https://code.visualstudio.com/download) to download and install VSCode for your operating system

### Installing Conda via Miniforge

Miniforge provides a streamlined approach to Conda installation with a minimal environment and access to the conda-forge community repository, which is popular for its extensive collection of data science and scientific computing packages. Miniforge is available for all major operating systems, making it a flexible choice for cross-platform development.  **If you do not already have Conda installed** please follow the instructions below to install Miniforge. 

#### macOS & Linux

1. Download the Miniforge installer for your platform from [Miniforge releases](https://github.com/conda-forge/miniforge/releases).
2. Open a terminal and navigate to the download location.
3. Run the installer:
   ```bash
   bash Miniforge3-Linux-x86_64.sh  # or the macOS equivalent
   ```
4. Follow the prompts to complete installation.

#### Windows

1. Download the Miniforge installer for Windows from [Miniforge releases](https://github.com/conda-forge/miniforge/releases).
2. Open and proceed through the installer with the default settings.
3. To verify your installation, open the program `Minforge Prompt` and print the version of your Conda installation by typing:
```bash
conda --version
```

## Creating and Managing Environments

One of the key advantages of Conda is its ability to create isolated environments, which are essentially self-contained workspaces with their own packages and dependencies. This allows us to experiment, develop, and analyze data without worrying about conflicts between different package versions, which can often disrupt workflows. This is especially helpful for reproducible research: by keeping dependencies organized, we ensure that our projects are replicable across systems.

This section covers the basics of creating, inspecting, activating, and deactivating Conda environments.


| Command                         | Description                                      |
|---------------------------------|--------------------------------------------------|
| `conda create -n env_name`      | Create a new environment named `env_name`        |
| `conda create -p dir_name`      | Create a new environment in the specified directory `dir_name`        |
| `conda env list`                | List all existing Conda environments             |
| `conda activate env_name`       | Activate the environment `env_name`              |
| `conda deactivate`              | Deactivate the current Conda environment         |
| `conda info --envs`             | Show paths and basic info about all environments |

---

:::{#exr-}
Create a new empty Conda environment named `test_env`.
:::

:::{.sol}
```bash
conda create -n test_env
```
:::

:::{#exr-}
List all environments to verify that `test_env` was created.
:::

:::{.sol}
```bash
conda info --envs
```
:::

:::{#exr-}
Activate `test_env` and confirm activation.
:::

:::{.sol}
```bash
conda activate test_env
```
:::

:::{#exr-}
Deactivate the environment
:::

:::{.sol}
```bash
conda deactivate
```
:::


## Managing Packages with Conda

Conda environment allow us to install libraries and dependencies specific to each project. This helps avoid the challenges of "dependency hell" where incompatible package versions interfere with each other. Conda also allows us to install non-Python packagesm providing great flexibility and power, especially for complex data workflows involving multiple languages.

Per default, Miniforge's distribution of conda will install packages from the `conda-forge` channel which contains a wealth of scientific packages for download - you can find the full list [here](https://conda-forge.org/packages/)


| Command                                | Description                                      |
|----------------------------------------|--------------------------------------------------|
| `conda install package_name`           | Install `package_name` into the active environment |
| `conda install package_name -y` | Install `package_name` and automatically answer "yes" when being asked for confirmation |
| `conda install -c conda-forge package_name`           | Install `package_name` from the `conda-forge` channel into the active environment. |
| `conda list`                           | List all installed packages in the active environment |
| `conda remove package_name` | Remove `package_name` from the active environment |
| `conda clean --all` | Remove orphaned packages to clean up the active environment |

---


:::{#exr-}
Create and activate new environment named `py_env`.
:::

:::{.sol}
```bash
conda create -n py_env
conda activate py_env
```
:::

:::{#exr-}
Install `python=3.9` in `py_env`.
:::

:::{.sol}
```bash
conda install python=3.9
```
:::

:::{#exr-}
List all installed packages and verify that you see Python with version 3.9.xx installed.
:::

:::{.sol}
```bash
conda list
```
:::

:::{#exr-}
Alternatively, type `python --version` to verify Python was installed. 
:::

:::{.sol}
```bash
python --version
```
:::


:::{#exr-}
Install the package `numpy` into `py_env` and use the `-y` flag to automaticallt confirm the installation. List all packages in `py_env` to confirm the installation
:::


:::{.sol}
```bash
conda install numpy -y
conda list
```
:::

:::{#exr-}
Now use `conda remove` to uninstall `numpy` and `list` all packages to confirm numpy was removed.
:::

:::{.sol}
```bash
conda remove numpy
conda list
```
:::


:::{#exr-}
Even though `conda remove`, removes a package (and it's oprhaned dependencies) from the environment, it won't remove them from your computer - use `conda clean --all` to clean up packages and files that are no longer needed.
:::

:::{.sol}
```bash
conda clean --all
```
:::

:::{#exr-}
Deactivate the environment `py_env`
:::

:::{.sol}
```bash
conda deactivate
```
:::

:::{#exr-}
Create and activate a new environment called `r_env`. Then, install `r-base` and verify the installation.
:::

:::{.sol}
```bash
conda create -n r_env
conda activate r_env
conda install r-base
conda list
```
:::


## Installing Packages with Pip

While conda provides its own package manager, the conda-forge repository may not contain the package we are looking for. In this case, we can use the package manager `pip` which allows us to install from the Python Package Index (PyPI). PyPI is the largest repository for Python packages and it is less curated than conda-forge, meaning that anyone can upload their software there. By installing `pip` in our conda environment, we can access packages in both repositories!

Please note that combining two package managers, `pip` and `conda` within the same environment can lead to conflicts if they manage dependencies differently. Thus, it is a good pratice to stick mostly to `conda` and only use `pip` if needed.

| Command                                | Description                                      |
|----------------------------------------|--------------------------------------------------|
| `conda search something` | Search the conda repositories for a package called `something`|
| `pip install mypackage` | Install `mypackage` into the current environment |
| `pip uninstall mypackage` | Install the `mypackage` |

---

:::{#exr-}
Activate the environment `py_env`
:::

:::{.sol}
```bash
conda activate py_env
```
:::

:::{#exr-}
Seach the conda repository for the `matplotlib` package, what does the printed message say?
:::

:::{.sol}
```bash
conda search matplotlib
```
:::


:::{#exr-}
Use `conda install` to install `matplotlib`.
:::

:::{.sol}
```bash
conda install matplotlib
```
:::

:::{#exr-}
Now, try to install matplotlib using `pip install`, what does the printed message say?
:::

:::{.sol}
```bash
pip install matplotlib
```
:::

:::{#exr-}
Now, install the `slab` (soundlab) package. First, use `conda search` to see whether the package is available via conda and, if not, install it via `pip`.
:::


:::{.sol}
```bash
conda search slab
pip install slab
```
:::


:::{#exr-}
Uninstall `slab` again.
:::


:::{.sol}
```bash
pip uninstall slab
```
:::


## Exporting and Importing Environments

Often, we would like to reproduce an environment across multiple computers and potentially share it with our collaborators. With Conda, we can `export` an evironment, which creates a file that lists all of the packages that are installed with their exact version. With this file, we can create an exact replication of the environment, even after we deleted it or moved to a different setup.

| Command                                     | Description                                              |
|---------------------------------------------|----------------------------------------------------------|
| `conda env export > environment.yml`        | Save active environment configuration to `environment.yml` |
| `conda remove -n env_name --all`     | Remove the environment `env_name` completely |
| `conda env create -f environment.yml`       | Create a new environment from the file `environment.yml` |
| `conda env list`   | List all conda environments |

---

:::{#exr-}
Activate the `py_env` environment and export it to a file named `py_env.yml`.
:::

:::{.sol}
```bash
conda activate py_env
conda env export > py_env.yml
```
:::

:::{#exr-}
Open `py_env.yml` in VSCode by clicking it in the file browser on the left and quickly scan its contents.
:::


:::{#exr-}
Deactivate and remove `py_env` using `conda remove -n py_env --all`. List all the environments to verify that it has been removed.
:::

:::{.sol}
```bash
conda deactivate
conda remove -n py_env --all
conda env list
```
:::

:::{#exr-}
Recreate `py_env` from the `py_env.yml` file.
:::

:::{.sol}
```bash
conda env create -f py_env.yml
```
:::

:::{#exr-}
Verify the recreation by activating `py_env` and listing the installed packages.
:::

:::{.sol}
```bash
conda activate py_env
conda list
```
:::

:::{#exr-}
Bonus: remove all the environments you don't want to keep after this session.
:::
